(def lst (list 7 8 9))
(map lst '(+ 1)
)
(map lst '(+ 1))
(map lst '(reduce + % ))
(map lst #(reduce + % ))
(map lst #(reduce  % +))
(map  #(reduce + % ) lst)
(map  #(reduce + [%] ) lst)
(map  #(reduce + [% %] ) lst)
(#(reduce + [% %]) 8)
(#(+ % %) 8)
(compose + +) 
(comp + +) 
((comp + +) 1 2 2)
((comp +) 1 2 2)
(* 2)
((* 2) 4)
(comp (* 2))
(comp '(* 2))
((comp '(* 2)) 3)
((comp (list * 2)) 3)
(partial * 2)
((partial * 2) 4)
